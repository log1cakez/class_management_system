// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

model Behavior {
    id           String      @id @default(cuid())
    name         String
    teacherId    String?
    isDefault    Boolean     @default(false)
    behaviorType BehaviorType @default(INDIVIDUAL)
    praise       String?     // Predefined praise message for this behavior
    createdAt    DateTime    @default(now())
    updatedAt    DateTime    @updatedAt

    // Relations
    teacher             Teacher?            @relation(fields: [teacherId], references: [id], onDelete: Cascade)
    points              Point[]
    groupWorkBehaviors  GroupWorkBehavior[]
    groupWorkAwards     GroupWorkAward[]

    @@unique([name, teacherId])
    @@map("behaviors")
}

enum BehaviorType {
    INDIVIDUAL
    GROUP_WORK
}

model Teacher {
    id        String   @id @default(cuid())
    email     String   @unique
    name      String
    password  String
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    // Relations
    classes    Class[]
    behaviors  Behavior[]
    groupWorks GroupWork[]

    @@map("teachers")
}

model Class {
    id          String   @id @default(cuid())
    name        String
    description String?
    teacherId   String
    createdAt   DateTime @default(now())
    updatedAt   DateTime @updatedAt

    // Relations
    teacher    Teacher     @relation(fields: [teacherId], references: [id], onDelete: Cascade)
    students   Student[]
    groupWorks GroupWork[]

    @@map("classes")
}

model Student {
    id        String   @id @default(cuid())
    name      String
    points    Int      @default(0)
    classId   String
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    // Relations
    class         Class          @relation(fields: [classId], references: [id], onDelete: Cascade)
    pointRecords  Point[]
    groupStudents GroupStudent[]

    @@map("students")
}

model Point {
    id           String   @id @default(cuid())
    studentId    String
    behaviorId   String?
    points       Int
    reason       String
    behaviorName String?
    createdAt    DateTime @default(now())
    updatedAt    DateTime @updatedAt

    // Relations
    student  Student   @relation(fields: [studentId], references: [id], onDelete: Cascade)
    behavior Behavior? @relation(fields: [behaviorId], references: [id], onDelete: SetNull)

    @@map("points")
}

model GroupWork {
    id        String   @id @default(cuid())
    name      String
    classId   String
    teacherId String
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    // Relations
    class    Class             @relation(fields: [classId], references: [id], onDelete: Cascade)
    teacher  Teacher           @relation(fields: [teacherId], references: [id], onDelete: Cascade)
    groups   Group[]
    behaviors GroupWorkBehavior[]

    @@map("group_works")
}

model Group {
    id          String   @id @default(cuid())
    name        String
    groupWorkId String
    createdAt   DateTime @default(now())
    updatedAt   DateTime @updatedAt

    // Relations
    groupWork GroupWork      @relation(fields: [groupWorkId], references: [id], onDelete: Cascade)
    students  GroupStudent[]
    awards    GroupWorkAward[]

    @@map("groups")
}

model GroupStudent {
    id        String   @id @default(cuid())
    groupId   String
    studentId String
    createdAt DateTime @default(now())

    // Relations
    group   Group   @relation(fields: [groupId], references: [id], onDelete: Cascade)
    student Student @relation(fields: [studentId], references: [id], onDelete: Cascade)

    @@unique([groupId, studentId])
    @@map("group_students")
}

model GroupWorkBehavior {
    id          String   @id @default(cuid())
    groupWorkId String
    behaviorId  String
    praise      String?  // Optional praise message for this behavior
    createdAt   DateTime @default(now())

    // Relations
    groupWork GroupWork @relation(fields: [groupWorkId], references: [id], onDelete: Cascade)
    behavior  Behavior  @relation(fields: [behaviorId], references: [id], onDelete: Cascade)

    @@unique([groupWorkId, behaviorId])
    @@map("group_work_behaviors")
}

model GroupWorkAward {
    id          String   @id @default(cuid())
    groupId     String
    behaviorId  String?
    points      Int
    praise      String
    badgeId     String?
    badgeName   String?
    awardedBy   String
    createdAt   DateTime @default(now())

    // Relations
    group    Group     @relation(fields: [groupId], references: [id], onDelete: Cascade)
    behavior Behavior? @relation(fields: [behaviorId], references: [id], onDelete: SetNull)

    @@map("group_work_awards")
}
